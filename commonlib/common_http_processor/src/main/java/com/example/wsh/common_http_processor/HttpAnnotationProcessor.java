package com.example.wsh.common_http_processor;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.JavaFile;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

/**
 * author: wenshenghui
 * created on: 2019/1/10 8:57
 * description: HttpAnnotationProcessor
 */
@AutoService(Processor.class)
public class HttpAnnotationProcessor extends AbstractProcessor {
    private Filer mFiler;
    private Messager mMessager;
    private Elements mElementUtils;
    private Map<String, ClassCreator2> mProxyMap = new HashMap<>();

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        mFiler = processingEnv.getFiler();
        mMessager = processingEnv.getMessager();
        mElementUtils = processingEnv.getElementUtils();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        HashSet<String> supportTypes = new LinkedHashSet<>();
        supportTypes.add(HttpReqBean.class.getCanonicalName());
        supportTypes.add(HttpBody.class.getCanonicalName());
        supportTypes.add(HttpBody.class.getCanonicalName());
        supportTypes.add(HttpParam.class.getCanonicalName());
        return supportTypes;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        mMessager.printMessage(Diagnostic.Kind.NOTE, "processing...");
        mProxyMap.clear();
        //得到所有的注解
        Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(HttpReqBean.class);
        for (Element element : elements) {

            TypeElement classElement = (TypeElement) element;
            String fullClassName = classElement.getQualifiedName().toString();
            //elements的信息保存到mProxyMap中
            ClassCreator2 proxy = mProxyMap.get(fullClassName);
            if (proxy == null) {
                proxy = new ClassCreator2(mElementUtils, classElement, mMessager);
                mProxyMap.put(fullClassName, proxy);
            }
        }
        //通过javapoet生成
        for (String key : mProxyMap.keySet()) {
            ClassCreator2 proxyInfo = mProxyMap.get(key);
            JavaFile.Builder builder = JavaFile.builder(proxyInfo.getPackageName(), proxyInfo.generateProxy());
            JavaFile javaFile = builder.build();
            try {
                //　生成文件
                javaFile.fileComment.toBuilder().add(" THIS CODE IS GENERATED BY HTTP ANOTATION LIB, DO NOT DELTE.");
                String projectDir = processingEnv.getOptions().get("projectDir");
                String moduleName = processingEnv.getOptions().get("moduleName");
                //String path = System.getProperty("user.dir")+"\\app\\src\\main\\java\\";
                //File outputFile1 = new File("../");
                System.out.print("WSH_LOG, projectDir  =" + projectDir + "\n");
                //System.out.print("WSH_LOG, moduleName  =" + moduleName + "\n");
                File outputFile = new File(projectDir + "\\src\\main\\java\\");
                //System.out.print("WSH_LOG, outputFile  =" + outputFile.getPath() + "\n");
                javaFile.writeTo(outputFile);
                //javaFile.writeTo(processingEnv.getFiler());
            } catch (IOException e) {
                System.out.print("WSH_LOG, error  =" + e.getMessage() + "\n");
                e.printStackTrace();
            }
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE, "process finish ...");
        return true;
    }
}
